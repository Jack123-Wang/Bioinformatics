library("dplyr")
library("edgeR")
setwd("F:\\生信分析\\※※数据库\\别人家的数据※※")
#1.准备scRNA-seq表达矩阵
#1.1导入scRNA数据
data<-read.table("scRNA.txt")
#1.2去除低表达的基因
data_high<-data[apply(data, 1, function(x) {sum(x>1) > floor(ncol(data)/1000)}),] 
#100是可以调整的，如果数字过低，会导致筛到相对高表达的基因过低。
dim (data)
dim (data_high) #查看还剩下多少基因
#提取筛选后数据中的第一列基因集
data_v1<-select(data_high,1) #select是dplyr R包的函数
data_v1<-toupper(as.character(data_v1$V1))
#1.3利用edgeR消除文库大小差异
data_high<-log2(edgeR::cpm(data_high)+1)
dim (data_high)
#1.4将第一列基因名转为列名rownames
#将第一列命名为列名称
rownames(data_high)=data_v1
#去除第一列，第二列为第一列
data_high=data_high[,-1]

#2.准备相关性热图的基因集
#2.1导入每个基因集的基因（并做大写）
Le<-read.table("Lethal.txt",header = T)
Le<-Le$Lethal
Le<-toupper(Le)

Mo<-read.table("Module.txt",header = T)
Mo<-Mo$Module
Mo<-toupper(Mo)

NOS<-read.table("NOS.txt",header = T)
NOS<-NOS$NOS
NOS<-toupper(NOS)

Pro<-read.table("Proliferation.txt",header = T)
Pro<-Pro$Proliferation
Pro<-toupper(Pro)
#2.2筛选掉基因集中与scRNA-seq尚未匹配的基因
Le=Le[Le%in%data_v1] #(%in%是判断前者是否在后者的范围内并给出True或False，在中括号下其意义为保留True的内容)
Mo=Mo[Mo%in%data_v1]
NOS=NOS[NOS%in%data_v1]
Pro=Pro[Pro%in%data_v1]

#3.计算每个基因集的colmean
#Le
ng<-data_high[match(Le,data_v1),1]
Le_Mean=colMeans(data_high[ng,])

#Mo
ng<-data_high[match(Mo,data_v1),1]
Mo_Mean=colMeans(data_high[ng,])

#NOS
ng<-data_high[match(NOS,data_v1),1]
NOS_Mean=colMeans(data_high[ng,])

#Pro
ng<-data_high[match(Pro,data_v1),1]
Pro_Mean=colMeans(data_high[ng,])

dat=data.frame(Le=Le_Mean,
               Mo=Mo_Mean,
               NOS=NOS_Mean,
               Pro=Pro_Mean)
M=cor(dat)
pheatmap::pheatmap(M)



#######################################################################################################################################
###############################################        New method(批量处理数据）         ###############################################
#######################################################################################################################################
setwd("C:\\Users\\Administrator\\Desktop")

library("dplyr")
library("edgeR")
#1.准备scRNA-seq表达矩阵
#1.1导入scRNA数据
data<-read.table("scRNA.txt")

#1.2去除低表达的基因
data_high<-data[apply(data, 1, function(x) {sum(x>1) > floor(ncol(data)/50)}),] 
#50是可以调整的，如果数字过低，会导致筛到相对高表达的基因过低。

！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！
！！！！！！！！！    data此时必需是表达矩阵，第一列不能是基因名     ！！！！！！！！！！！！
！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！

dim (data)
dim (data_high) #查看还剩下多少基因
#提取筛选后数据中的第一列基因集
data_v1<-select(data_high,1) #select是dplyr R包的函数
data_v1<-toupper(as.character(data_v1$V1))
#1.3将第一列基因名转为列名rownames
#将第一列命名为列名称
rownames(data_high)=data_v1
#去除第一列，第二列为第一列
data_high=data_high[,-1]
#1.4利用edgeR消除文库大小差异
data_high<-log2(edgeR::cpm(data_high)+1)
dim (data_high)

#2.准备基因集
dat=read.csv("mESC多能性数据.csv",fill=T,header=TRUE,na.strings="",stringsAsFactors=F)
dat_name<-names(dat)
#利用for循环批量形成基因集，并计算形成数据库（i=1,和2：22在dataM有差别，故分别跑)
i=1
a=dat[dat_name[i]]
write.table(a,"a.csv",col.names = FALSE,row.names = F)
b=read.csv("a.csv",header=F)
b=toupper(b$V1) #toupper可将列表转换为chr
b=b[b%in%data_v1] #二者必须均是chr，才可以成功
ng<-data_high[match(b,data_v1),1]
dataM<-ng

for(i in 2:22) {
  
  a=dat[dat_name[i]]
  write.table(a,"a.csv",col.names = FALSE,row.names = F)
  b=read.csv("a.csv",header=F)
  b=toupper(b$V1) #toupper可将列表转换为chr
  b=b[b%in%data_v1] #二者必须均是chr，才可以成功
  ng<-data_high[match(b,data_v1),1]
  
  dataM<-cbind(ng,dataM)
  assign(paste("G",i,sep=""),colMeans(data_high[ng,]))
}
dataM<-dataM[,-23]
colnames(dataM)<-colnames(dat)

M=cor(dataM)
pheatmap::pheatmap(M)

###############################################################################################################################################################
###############################################             涉及到ID转换的相关性热图            ####################################
#######################################################################################################################################################
setwd("F:\\生信分析\\※※数据库\\别人家的数据※※\\!GSE116165(scRNA-seq_E4.5、5.5、6.5）")

library("dplyr")
library("edgeR")
#1.准备scRNA-seq表达矩阵
#1.1导入scRNA数据
data<-read.table("GSE116165_rna_counts.txt",sep=",",header=T)
rownames(data)<-data$ens_id
data<-data[,-1]
#1.2去除低表达的基因
data_high<-data[apply(data, 1, function(x) {sum(x>1) > floor(ncol(data)/50)}),] 
#100是可以调整的，如果数字过低，会导致筛到相对高表达的基因过低。
dim (data)
dim (data_high) #查看还剩下多少基因
#提取筛选后数据中的第一列基因集
data_v1<-rownames(data_high) #select是dplyr R包的函数
data_v1<-toupper(as.character(data_v1$V1))
#1.3将第一列基因名转为列名rownames
#将第一列命名为列名称
rownames(data_high)=data_v1
#去除第一列，第二列为第一列
data_high=data_high[,-1]
#1.4利用edgeR消除文库大小差异
data_high<-log2(edgeR::cpm(data_high)+1)
dim (data_high)
setwd("C:\\Users\\Administrator\\Desktop")
#2.准备基因集
dat=read.csv("mESC多能性数据.csv",fill=T,header=TRUE,na.strings="",stringsAsFactors=F)
dat_name<-names(dat)
#利用for循环批量形成基因集，并计算形成数据库（i=1,和2：22在dataM有差别，故分别跑)

i=1
a=dat[dat_name[i]]
write.table(a,"a.csv",col.names = FALSE,row.names = F)
b=read.csv("a.csv",header=F)
b<-as.character(b$V1)

#ID转换:将b（gene symbol）转换为b1(ENSEMBL)
suppressMessages(library(org.Mm.eg.db)) 

k=keys(org.Mm.eg.db,keytype = "ENSEMBL")
list=select(org.Mm.eg.db,keys=k,columns = c("ENTREZID","SYMBOL"), keytype="ENSEMBL")
?????
b、b1匹配的数目对不上
?????

b1==list[match(b,list[,"ENSEMBL"]),]
b1<-na.omit(b1)

################

c1=b1[b1%in%data_v1] #二者必须均是chr，才可以成功
#如果无需ID转换，b1改成b即可
ng<-data_high[match(c1,data_v1),1]
dataM<-ng

#rm(dataM)

for(i in 2:22) {
  i=3
  a=dat[dat_name[i]]
  write.table(a,"a.csv",col.names = FALSE,row.names = F)
  b=read.csv("a.csv",header=F)
  b<-as.character(b$V1)
  
  
  b1<-list$ENSEMBL[b%in%list$SYMBOL]
  b2<-list$ENSEMBL[TRUE,FALSE]
  b1<-unique(b1)
  c1=b1[b1%in%data_v1] #二者必须均是chr，才可以成功
  ng<-data_high[match(c1,data_v1),1]
  dataM<-cbind(ng,dataM)
}

dataM<-dataM[,-23]
colnames(dataM)<-colnames(dat)

M=cor(dataM)
pheatmap::pheatmap(M)
