######置顶############
local({
  r <- getOption("repos")
  r["CRAN"] <- "http://mirror.lzu.edu.cn/CRAN"
  options(repos = r, BioC_mirror="https://mirrors.tuna.tsinghua.edu.cn/bioconductor")
})

install.packages("BiocManager")
BiocManager::install("ggplot2")
BiocManager::install("dplyr")
BiocManager::install("stringr")
#速度超级快，不知道是不是开了vpn的缘故
###########

#1.利用dplyr的filter函数筛选>或小于0.5的数据
dat_expr_top<-dat_expr %>%filter(ESC>=0.5)

#2.合并数据数据
dat_screen1T<-merge(dat_Screen1,dat_expr_top,by="Gene_Symbol")

#3.挑选数据框中的个别列
dat_screen1T<-select(dat_screen1T,Gene_Symbol,control_mean,treat_mean)

#4.导入不对齐的表格，且不转换为factor(一定用read.csv，而不是.table),提取其中一列信息

dat=read.csv("mESC多能性数据.csv",fill=T,header=TRUE,na.strings="",stringsAsFactors=F)

#fill=T,从一个电子表格中导出的文件通常会把拖尾的空字段忽略掉。为了读取这样的文件，必须设置参数 fill = TRUE
#默认情况下，文件是假定用 NA 表示缺损值，但是，这可以通过参数 na.strings 改变。na.string=""，指无内容的空格也被认定为NA。进而通过后续na.omit去除掉
#stringsAsFactors=F,默认是T，如果不是F，后续提取出单列时则不能通过na.omit去除空白行。

dat1<-dat$human同源基因
dat1<-na.omit(dat1)

#5.提取data.frame的每一列，并给与一个新变量
setwd("C:\\Users\\Administrator\\Desktop")
dat=read.csv("mESC多能性数据.csv",fill=T,header=TRUE,na.strings="",stringsAsFactors=F)
dat_name<-names(dat)

for(i in 1:22) {
  a=dat[dat_name[i]]
  write.table(a,"a.csv",col.names = FALSE,row.names = F)
  b=read.csv("a.csv",header=F)
  b=as.character(b$V1)
  assign(dat_name[i],b)
}

#6.调用（excel的vlookup）
library(dplyr)
b=left_join(a,score,by="ID") #合并a和score数据

#full_join：将两个数据集的所有观测都保留，缺失值用NA填补
#inner_join：只保留两个数据集中都有的观测
#right_join：保留第二个数据集的所有观测，第一个数据集中未能匹配的观测的对应变量值用NA填补
#left_join：保留第一个数据集的所有观测，第二个数据集中未能匹配的观测的对应变量值用NA填补
#semi_join：根据前一个数据集中的观测在后一个数据集是否有匹配观测来对前一个数据集的观测进行筛选，只保留有匹配的观测
#anti_join：根据前一个数据集中的观测在后一个数据集是否有匹配观测来对前一个数据集的观测进行筛选，只保留没有匹配的观测
#by=指定匹配变量，如果匹配变量在两个数据集中名字不同，可以用by = c("a" = "b")指定匹配x的a变量和y的b变量；另外可以用by = c("col1","col2",...)来指定多个匹配变量

#7.排序
library(dplyr)
arrange(x,shuxue,desc(yuwen))#按照shuxuec正序排序，然后按照yuwen倒序排序。

#8.去重（unique或disti）
exprSet3<-distinct(exprSet2,ID,.keep_all = T)

#9.去前缀或后缀
b<-str_replace(a,"ME","") #去除前缀"ME"

#10批量导入数据
temp = list.files(pattern="*.xls")
for (i in 1:1){
  assign("a",read.csv(temp[i],,sep = ""))

#11读取大文件时的代码：
read_part(file,rows=-1,columns=-1) #-1代表全读取，若读取选定的几行，可以输入c(1,3,5)
read_part <- function(file, rows = 1, columns = -1, sep = "\t",
                      stringsAsFactors = FALSE,
                      header = FALSE,
                      check.names = FALSE, 
                      comment.char = "#", ...){
  dfl <- list()
  if (grepl("gz$", file)){
    con <- gzfile(file, open = "rb")
  } else{
    con <- file(file, open = "r")
  }
  
  i <- 0
  j <- 1
  repeat{
    
    rec <- readLines(con, 1)
    if (length(rec) == 0) break
    i <- i + 1
    
    # 当rows = -1时, 会读取所有行 
    # 超过目标行时停止读取
    if (i > max(rows) & rows != -1) break  
    # 不考虑注释行
    if (grepl(comment.char, rec )) next
    if ( ! i %in% rows & rows != -1) next
    
    items <- strsplit(rec, split = sep, fixed = TRUE)[[1]]
    if ( columns == -1){
      select_cols <- items
    } else{
      select_cols <- items[columns]
    }
    #print(select_cols)
    dfl[[j]] <- select_cols
    j <- j + 1
    
    
  }
  close(con) 
  df <- do.call(rbind, dfl)
  return(df)
}
