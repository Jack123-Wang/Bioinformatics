setwd("F:\\生信Data")
install.packages("data.table")
BiocManager::install("rtracklayer")
BiocManager::install("IRanges")

#1.计算小鼠基因长度

####方法一####
library(data.table)
library("IRanges")
require("rtracklayer")
mmu10 <- readGFF("gencode.vM24.annotation.gtf")
anno <- setDT(mmu10)
anno <- anno[type=="exon",]
setnames(anno,c("seqid","start","end","gene_name","exon_number"),c("Chr","ExonStart","ExonEnd","Gene","Exon_number"))

Exon_region <- unique(anno[,.(Chr,ExonStart,ExonEnd,Exon_number,Gene)])
Exon_region <- Exon_region[,{x <- IRanges(ExonStart,ExonEnd);y <- reduce(x); list(ExonStart=y@start,ExonEnd=y@start+y@width-1)},by=.(Gene,Chr)]
Exon_region[,Exon_num:=1:.N,by=Gene]
Exon_region <- Exon_region[,.(Chr,ExonStart,ExonEnd,Exon_num,Gene)]
Exon_len <- Exon_region[,.(ExonLen = ExonEnd - ExonStart + 1),by=.(Exon_num,Gene)]
gene_len <- Exon_len[,.(Length = sum(ExonLen)),by=Gene]
fwrite(gene_len, file = "All_mmu10gene_len.txt", sep = "\t", col.names = T)
####  End  ####

####方法二####
wget ftp://ftp.ncbi.nlm.nih.gov/pub/CCDS/current_mouse/CCDS.current.txt
grep -v '^#' CCDS.current.txt | perl -alne '{/\[(.*?)\]/;$len=0;foreach(split/,/,$1){@tmp=split/-/;$len+=($tmp[1]-$tmp[0])};$h{$F[2]}=$len if $len >$h{$F[2]}} END{print "$_\t$h{$_}" foreach sort keys %h}' >mm10_ccds_length.txt
####  End  ####


#2.计算FPKM,TPM（需要两组数据：read count和基因长度）
#2.1 在excel里，将两组数据以基因名称为索引整合，运用函数vlookup，个人建议"精确匹配"
#整合好后，以txt导出，确定好工作目录后，导入
countDf <- read.table("test.txt",header = T)
# 官网https://haroldpimentel.wordpress.com/2014/05/08/what-the-fpkm-a-review-rna-seq-expression-units/
#中提到FLD，和有效长度的概念，不考虑有效基因长度的概念，在后续代码中，efflength即为正常基因长度



setwd("C:/Users/Administrator/Desktop")
#Step1：准备表达矩阵和基因长度list
#导入基因长度list（从github上下载）
gene<-read.table("mm10_ccds_length.txt",header =F)
names(gene)<-c("ID","length")

#导入表达矩阵（counts)(最终形式为：rownames是基因名，colnames是样本名,从第一列开始就是数值，即表达矩阵)
exprSet<-read.csv("2i_GSE122067_counts.csv")
exprSet<-exprSet[,-2]
rownames(exprSet)<-exprSet$X
exprSet<-exprSet[ rownames(exprSet) %in% gene$ID ,]#得出与gene长度list对应的exprSet
#exprSet<-exprSet[,-1]

total_count<- colSums(exprSet)

#得出与exprSet对应的基因length
neededGeneLength=gene[match(rownames(exprSet), gene$ID),2] 


#Step2:形成公式
countToTpm <- function(counts, effLen)
{ rate <- log(counts) - log(effLen)
  denom <- log(sum(exp(rate)))
  exp(rate - denom + log(1e6))}

countToFpkm <- function(counts, effLen)
{ N <- sum(counts)
  exp( log(counts) + log(1e9) - log(effLen) - log(N) )}

fpkmToTpm <- function(fpkm)
  {exp(log(fpkm) - log(sum(fpkm)) + log(1e6))}

#Step3:RPKM、TPM、RPKM/TPM的转换
############   1.计算count到RPKM  ############
for (i in 1:1){
  i=1
  counts<-exprSet[i]
  effLen<-neededGeneLength
  N<-sum(counts)
  b<-exp( log(counts) + log(1e9) - log(effLen) - log(N) )
}
#rm(b)

for (i in 2:length(exprSet)){
  counts<-exprSet[i]
  effLen<-neededGeneLength
  N<-sum(counts)
  c<-exp( log(counts) + log(1e9) - log(effLen) - log(N) )
  names(c)[1]<-"id"
  b<-cbind(b,c$id)
}
names(b)<-names(exprSet)
write.csv(b,"GSE122067_RPKM.csv")


############    2.计算FPKM到TPM    ##########
#将RPKM数据导入到b向量中
for (i in 1:1){
  i=1
  fpkm<-b[i]
  c<-exp(log(fpkm) - log(sum(fpkm)) + log(1e6))
}

for (i in 2:length(exprSet)){

  fpkm<-b[i]
  d<-exp(log(fpkm) - log(sum(fpkm)) + log(1e6))
  names(d)[1]<-"id"
  c<-cbind(c,d$id)
}
names(c)<-names(exprSet)
write.csv(c,"GSE122067_TPM1.csv")

############   3.计算count到TPM    ############
rm(b)
for (i in 1:1){
  i=1
  counts<-exprSet[i]
  effLen<-neededGeneLength
  N<-sum(counts)
  b<-countToTpm(counts, effLen)
}

for (i in 2:length(exprSet)){
  counts<-exprSet[i]
  effLen<-neededGeneLength
  N<-sum(counts)
  c<-countToTpm(counts, effLen)
  names(c)[1]<-"id"
  b<-cbind(b,c$id)
}
names(b)<-names(exprSet)
write.csv(b,"GSE122067_TPM.csv")


